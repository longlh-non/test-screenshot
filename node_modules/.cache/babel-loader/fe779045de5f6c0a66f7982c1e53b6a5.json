{"ast":null,"code":"export default {\n  data() {\n    return {\n      crossHairsLeft: 0,\n      crossHairsTop: 0,\n      startX: 0,\n      startY: 0,\n      isMouseDown: false,\n      isDraggingMouse: false\n    };\n  },\n\n  methods: {\n    move: function (event) {\n      var startY = this.startY,\n          startX = this.startX,\n          endX = event.clientX,\n          endY = event.clientY,\n          windowWidth = window.innerWidth,\n          windowHeight = window.innerHeight;\n      this.crossHairsTop = event.clientY;\n      this.crossHairsLeft = event.clientX;\n\n      if (this.isMouseDown) {\n        if (endX >= startX && endY >= startY) {\n          this.isDragging = true;\n          this.borderWidth = startY + \"px \" + (windowWidth - endX) + \"px \" + (windowHeight - endY) + \"px \" + startX + \"px\";\n        }\n      }\n    },\n    mouseDown: function (event) {\n      this.startX = event.clientX;\n      this.startY = event.clientY;\n      this.isMouseDown = true;\n    },\n    mouseUp: function (e) {\n      this.borderWidth = 0; // resetting the overlay\n\n      if (this.isDragging) {\n        // Don't take the screenshot unless the mouse moved somehow.\n        this.tookScreenShot = true;\n      }\n\n      this.isDragging = false;\n      this.mouseIsDown = false;\n      this.takeScreenshot();\n    },\n    takeScreenshot: function () {\n      html2canvas(document.querySelector('body')).then(canvas => {\n        let croppedCanvas = document.createElement('canvas'),\n            croppedCanvasContext = croppedCanvas.getContext('2d');\n        croppedCanvas.width = this.croppedImageWidth;\n        croppedCanvas.height = this.croppedImageHeight;\n        croppedCanvasContext.drawImage(canvas, this.startX, this.startY, this.croppedImageWidth, this.croppedImageHeight, 0, 0, this.croppedImageWidth, this.croppedImageHeight);\n        this.imageUrl = croppedCanvas.toDataURL();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAQA,eAAe;EACbA,IAAI,GAAG;IAAE,OAAO;MACdC,cAAc,EAAE,CADF;MAEdC,aAAa,EAAE,CAFD;MAGdC,MAAM,EAAE,CAHM;MAIdC,MAAM,EAAE,CAJM;MAKdC,WAAW,EAAE,KALC;MAMdC,eAAe,EAAE;IANH,CAAP;EAQR,CATY;;EAWbC,OAAO,EAAE;IAEPC,IAAI,EAAE,UAAUC,KAAV,EAAiB;MACd,IAAIL,MAAK,GAAU,KAAKA,MAAxB;MAAA,IACHD,MAAK,GAAU,KAAKA,MADjB;MAAA,IAEHO,IAAG,GAAYD,KAAK,CAACE,OAFlB;MAAA,IAGHC,IAAG,GAAYH,KAAK,CAACI,OAHlB;MAAA,IAIHC,WAAU,GAAKC,MAAM,CAACC,UAJnB;MAAA,IAKHC,YAAW,GAAIF,MAAM,CAACG,WALnB;MAMP,KAAKhB,aAAL,GAAqBO,KAAK,CAACI,OAA3B;MACA,KAAKZ,cAAL,GAAsBQ,KAAK,CAACE,OAA5B;;MACM,IAAI,KAAKN,WAAT,EAAsB;QAC1B,IAAIK,IAAG,IAAKP,MAAR,IAAkBS,IAAG,IAAKR,MAA9B,EAAsC;UACpC,KAAKe,UAAL,GAAkB,IAAlB;UACA,KAAKC,WAAL,GAAmBhB,MAAK,GAAI,KAAT,IAAkBU,WAAU,GAAIJ,IAAhC,IAAwC,KAAxC,IAAiDO,YAAW,GAAIL,IAAhE,IAAwE,KAAxE,GAAgFT,MAAhF,GAAyF,IAA5G;QACF;MACF;IACD,CAjBM;IAmBPkB,SAAS,EAAE,UAAUZ,KAAV,EAAiB;MAC1B,KAAKN,MAAL,GAAcM,KAAK,CAACE,OAApB;MACA,KAAKP,MAAL,GAAcK,KAAK,CAACI,OAApB;MACA,KAAKR,WAAL,GAAmB,IAAnB;IACD,CAvBM;IAyBPiB,OAAO,EAAE,UAAUC,CAAV,EAAa;MACtB,KAAKH,WAAL,GAAmB,CAAnB,CADsB,CACA;;MAEtB,IAAI,KAAKD,UAAT,EAAqB;QACnB;QACA,KAAKK,cAAL,GAAsB,IAAtB;MACF;;MAEA,KAAKL,UAAL,GAAkB,KAAlB;MACA,KAAKM,WAAL,GAAmB,KAAnB;MAEA,KAAKC,cAAL;IAEH,CAtCU;IAwCTA,cAAc,EAAE,YAAY;MAC1BC,WAAW,CAACC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAD,CAAX,CAA4CC,IAA5C,CAAiDC,MAAK,IAAK;QACzD,IAAIC,aAAY,GAAIJ,QAAQ,CAACK,aAAT,CAAuB,QAAvB,CAApB;QAAA,IACIC,oBAAmB,GAAIF,aAAa,CAACG,UAAd,CAAyB,IAAzB,CAD3B;QAGAH,aAAa,CAACI,KAAd,GAAuB,KAAKC,iBAA5B;QACAL,aAAa,CAACM,MAAd,GAAuB,KAAKC,kBAA5B;QAEAL,oBAAoB,CAACM,SAArB,CAA+BT,MAA/B,EAAuC,KAAK5B,MAA5C,EAAoD,KAAKC,MAAzD,EAAiE,KAAKiC,iBAAtE,EAAyF,KAAKE,kBAA9F,EAAkH,CAAlH,EAAqH,CAArH,EAAwH,KAAKF,iBAA7H,EAAgJ,KAAKE,kBAArJ;QAEA,KAAKE,QAAL,GAAgBT,aAAa,CAACU,SAAd,EAAhB;MACD,CAVD;IAWF;EApDS;AAXI,CAAf","names":["data","crossHairsLeft","crossHairsTop","startX","startY","isMouseDown","isDraggingMouse","methods","move","event","endX","clientX","endY","clientY","windowWidth","window","innerWidth","windowHeight","innerHeight","isDragging","borderWidth","mouseDown","mouseUp","e","tookScreenShot","mouseIsDown","takeScreenshot","html2canvas","document","querySelector","then","canvas","croppedCanvas","createElement","croppedCanvasContext","getContext","width","croppedImageWidth","height","croppedImageHeight","drawImage","imageUrl","toDataURL"],"sourceRoot":"","sources":["/home/misa/Coding/test-screenshot/test-screenshot/test-screenshot/src/components/screen-shot.vue"],"sourcesContent":["<template>\n  <div id=\"screenshot\" class=\"container\" @mousemove=\"move\" @mousedown=\"mouseDown\" @mouseup=\"mouseUp\">\n  <div class=\"overlay\" :class=\"{ 'highlighting' : isMouseDown }\" :style=\"{ borderWidth: borderWidth }\"></div>\n  <div class=\"crosshairs\" :class=\"{ 'hidden' : isDraggingMouse }\" :style=\"{ left: crossHairsLeft + 'px', top: crossHairsTop + 'px' }\"></div>\n</div>\n</template>\n\n<script>\nexport default {\n  data() { return {\n    crossHairsLeft: 0,\n    crossHairsTop: 0,\n    startX: 0,\n    startY: 0,\n    isMouseDown: false,\n    isDraggingMouse: false\n  }\n  },\n\n  methods: {\n\n    move: function (event) {\n             var startY       = this.startY,\n          startX       = this.startX,\n          endX         = event.clientX,\n          endY         = event.clientY,\n          windowWidth  = window.innerWidth,\n          windowHeight = window.innerHeight\n      this.crossHairsTop = event.clientY;\n      this.crossHairsLeft = event.clientX;\n            if (this.isMouseDown) {\n        if (endX >= startX && endY >= startY) {\n          this.isDragging = true;\n          this.borderWidth = startY + \"px \" + (windowWidth - endX) + \"px \" + (windowHeight - endY) + \"px \" + startX + \"px\";\n        }\n      }\n    },\n\n    mouseDown: function (event) {\n      this.startX = event.clientX;\n      this.startY = event.clientY;\n      this.isMouseDown = true;\n    },\n\n    mouseUp: function (e) {\n    this.borderWidth = 0; // resetting the overlay\n\n    if (this.isDragging) {\n      // Don't take the screenshot unless the mouse moved somehow.\n      this.tookScreenShot = true;\n    }\n\n    this.isDragging = false;\n    this.mouseIsDown = false;\n\n    this.takeScreenshot();\n\n},\n\n  takeScreenshot: function () {\n    html2canvas(document.querySelector('body')).then(canvas => {\n      let croppedCanvas = document.createElement('canvas'),\n          croppedCanvasContext = croppedCanvas.getContext('2d');\n\n      croppedCanvas.width  = this.croppedImageWidth;\n      croppedCanvas.height = this.croppedImageHeight;\n\n      croppedCanvasContext.drawImage(canvas, this.startX, this.startY, this.croppedImageWidth, this.croppedImageHeight, 0, 0, this.croppedImageWidth, this.croppedImageHeight);\n\n      this.imageUrl = croppedCanvas.toDataURL();\n    });\n  }\n}\n}\n\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}