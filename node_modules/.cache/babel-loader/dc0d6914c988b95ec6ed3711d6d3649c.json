{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"Flash\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    id: \"screenshot\",\n    class: \"container\",\n    onMousemove: _cache[0] || (_cache[0] = (...args) => $options.move && $options.move(...args)),\n    onMousedown: _cache[1] || (_cache[1] = (...args) => $options.mouseDown && $options.mouseDown(...args)),\n    onMouseup: _cache[2] || (_cache[2] = (...args) => $options.mouseUp && $options.mouseUp(...args))\n  }, [_createVNode(_Transition, {\n    name: \"screenshot\"\n  }, {\n    default: _withCtx(() => [$data.tookScreenShot ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1)) : _createCommentVNode(\"v-if\", true)]),\n    _: 1\n    /* STABLE */\n\n  }), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"overlay\", {\n      'highlighting': $data.mouseIsDown\n    }]),\n    style: _normalizeStyle({\n      borderWidth: $data.borderWidth\n    }),\n    ref: \"overlay\"\n  }, null, 6\n  /* CLASS, STYLE */\n  ), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"crosshairs\", {\n      'hidden': $data.isDragging\n    }]),\n    style: _normalizeStyle({\n      left: $data.crossHairsLeft + 'px',\n      top: $data.crossHairsTop + 'px'\n    }),\n    ref: \"crosshairs\"\n  }, null, 6\n  /* CLASS, STYLE */\n  ), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"borderedBox\", {\n      'hidden': !$data.isDragging\n    }]),\n    style: _normalizeStyle({\n      left: $data.boxLeft + 'px',\n      top: $data.boxTop + 'px',\n      width: $data.boxEndWidth + 'px',\n      height: $data.boxEndHeight + 'px'\n    })\n  }, null, 6\n  /* CLASS, STYLE */\n  ), _createElementVNode(\"span\", {\n    class: _normalizeClass([\"tooltip\", {\n      'hidden': !$data.isDragging\n    }]),\n    style: _normalizeStyle({\n      left: $data.toolTipLeft + 'px',\n      top: $data.toolTipTop + 'px'\n    }),\n    ref: \"tooltip\"\n  }, _toDisplayString($data.boxEndWidth) + \" x \" + _toDisplayString($data.boxEndHeight) + \"px\", 7\n  /* TEXT, CLASS, STYLE */\n  )], 32\n  /* HYDRATE_EVENTS */\n  );\n}","map":{"version":3,"mappings":";;;EAKSA,KAAK,EAAC;;;uBAHfC,oBAcM,KAdN,EAcM;IAdDC,EAAE,EAAC,YAcF;IAdeF,KAAK,EAAC,WAcrB;IAdkCG,WAAS,yCAAEC,uCAAF,CAc3C;IAdoDC,WAAS,yCAAED,iDAAF,CAc7D;IAd2EE,SAAO,yCAAEF,6CAAF;EAclF,CAdN,GAEEG,aAEaC,WAFb,EAEa;IAFDC,IAAI,EAAC;EAEJ,CAFb,EAA6B;sBAC3B,MAA+C,CAAtBC,sCAAzBT,oBAA+C,KAA/C,kDAA+C,EADpB;;;;EAAA,CAA7B,GAKAU,oBAAyH,KAAzH,EAAyH;IAApHX,KAAK,mBAAC,SAAD,EAAU;MAAA,gBAA4BU;IAA5B,CAAV,EAA+G;IAAzDE,KAAK;MAAAC,aAAiBH;IAAjB,EAAoD;IAApBI,GAAG,EAAC;EAAgB,CAAzH;;EAAA,GAEAH,oBAAsJ,KAAtJ,EAAsJ;IAAjJX,KAAK,mBAAC,YAAD,EAAa;MAAA,UAAsBU;IAAtB,CAAb,EAA4I;IAA1FE,KAAK;MAAAG,MAAUL,uBAAc,IAAxB;MAAwBM,KAAcN,sBAAa;IAAnD,EAAqF;IAAvBI,GAAG,EAAC;EAAmB,CAAtJ;;EAAA,GAEAH,oBAAgL,KAAhL,EAAgL;IAA3KX,KAAK,mBAAC,aAAD,EAAc;MAAA,WAAsBU;IAAtB,CAAd,EAAsK;IAAnHE,KAAK;MAAAG,MAAUL,gBAAO,IAAjB;MAAiBM,KAAcN,eAAM,IAArC;MAAqCO,OAAgBP,oBAAW,IAAhE;MAAgEQ,QAAiBR,qBAAY;IAA7F;EAA8G,CAAhL;;EAAA,GAEAC,oBAA+K,MAA/K,EAA+K;IAAzKX,KAAK,mBAAC,SAAD,EAAU;MAAA,WAAsBU;IAAtB,CAAV,EAAoK;IAArHE,KAAK;MAAAG,MAAUL,oBAAW,IAArB;MAAqBM,KAAcN,mBAAU;IAA7C,EAAgH;IAAzDI,GAAG,EAAC;EAAqD,CAA/K,mBAAsIJ,qBAAa,QAAGS,iBAAET,kBAAF,IAAgB,IAAtK,EAAwK;EAAA;EAAxK,EAbF;;EAAA","names":["class","_createElementBlock","id","onMousemove","$options","onMousedown","onMouseup","_createVNode","_Transition","name","$data","_createElementVNode","style","borderWidth","ref","left","top","width","height","_toDisplayString"],"sourceRoot":"","sources":["/home/misa/Coding/test-screenshot/test-screenshot/test-screenshot/src/components/screen-shot.vue"],"sourcesContent":["\n<template>\n<div id=\"screenshot\" class=\"container\" @mousemove=\"move\" @mousedown=\"mouseDown\" @mouseup=\"mouseUp\">\n  \n  <transition name=\"screenshot\">\n    <div class=\"Flash\" v-if=\"tookScreenShot\"></div>\n  </transition>\n  \n  \n  <div class=\"overlay\" :class=\"{ 'highlighting' : mouseIsDown }\" :style=\"{ borderWidth: borderWidth }\" ref=\"overlay\"></div>\n  \n  <div class=\"crosshairs\" :class=\"{ 'hidden' : isDragging }\" :style=\"{ left: crossHairsLeft + 'px', top: crossHairsTop + 'px' }\" ref=\"crosshairs\"></div>\n  \n  <div class=\"borderedBox\" :class=\"{ 'hidden': !isDragging }\" :style=\"{ left: boxLeft + 'px', top: boxTop + 'px', width: boxEndWidth + 'px', height: boxEndHeight + 'px' }\"></div>\n  \n  <span class=\"tooltip\" :class=\"{ 'hidden': !isDragging }\" :style=\"{ left: toolTipLeft + 'px', top: toolTipTop + 'px'}\" ref=\"tooltip\">{{boxEndWidth}} x {{boxEndHeight}}px</span>\n</div>\n</template>\n\n<script>\nimport html2canvas from 'html2canvas'\n/* eslint-disable no-unused-vars */\nvar test\nexport default {\n  data() { return {\nmouseIsDown: false,\n    isDragging: false, \n    tookScreenShot: false, // After the mouse is released\n    \n    // Used to calculate where to start showing the dragging area\n    startX: 0,\n    startY: 0,\n    endX: 0,\n    endY: 0,\n    \n    borderWidth: \"\",\n    \n    // Handling the positioning of the crosshairs\n    crossHairsLeft: 0,\n    crossHairsTop: 0,\n    \n    // The box that contains the border and all required numbers.\n    boxTop: 0,\n    boxLeft: 0,\n    boxEndWidth: 0,\n    boxEndHeight: 0,\n    \n    // The tooltip's required positioning numbers.\n    toolTipLeft: 0,\n    toolTipTop: 0,\n    toolTipWidth: 0,\n    toolTipHeight: 0,\n    \n    windowHeight: 0,\n    windowWidth: 0,\n    tooltipMargin: 0,\n    crosshairs: '',\n    overlay: '',\n    tooltip: '',\n    imageUrl: ''\n  }\n  },\n\n  methods: {\n\n    move: function (e) {\n      \n      this.crossHairsTop = e.clientY;\n      this.crossHairsLeft = e.clientX;\n      \n      var tooltipBoundingRect = this.tooltip.getBoundingClientRect();\n      \n      this.toolTipWidth = tooltipBoundingRect.width;\n      this.toolTipHeight = tooltipBoundingRect.height;\n      \n      /* \n       * Change how the borderWidth is being calculated based on the x and y values.\n       * Calculate the box with the 1px border's positioning and width \n       * Calculate the positioning of the tooltip */\n      if (this.mouseIsDown) {\n        \n        var endY = this.endY = e.clientY,\n            endX = this.endX = e.clientX,\n            startX = this.startX,\n            startY = this.startY,\n            windowWidth = this.windowWidth,\n            windowHeight = this.windowHeight;\n        \n         // Calculating the values differently depending on how the user start's dragging.\n         if (endX >= startX && endY >= startY) {\n           \n           this.isDragging = true;\n           \n           this.borderWidth = startY + \"px \" + (windowWidth - endX) + \"px \" + (windowHeight - endY) + \"px \" + startX + \"px\";\n          \n           this.boxTop = startY;\n           this.boxLeft = startX;\n           this.boxEndWidth = endX - startX;\n           this.boxEndHeight = endY - startY;\n           \n           this.toolTipLeft = endX;\n           this.toolTipTop = endY;\n           \n           if (endX + this.toolTipWidth >= windowWidth) {\n             this.toolTipLeft = windowWidth - this.toolTipWidth - (this.tooltipMargin * 2);\n           }\n           \n           if (endY + this.toolTipHeight + (this.tooltipMargin * 2) >= windowHeight) {\n             this.toolTipTop = windowHeight - this.toolTipHeight - (this.tooltipMargin * 2);\n           }\n           \n         } else if (endX <= startX && endY >= startY) {\n           \n           this.isDragging = true;\n           \n           this.borderWidth = startY + \"px \" + (windowWidth - startX) + \"px \" + (windowHeight - endY) + \"px \" + endX + \"px\";\n           \n           this.boxLeft = endX;\n           this.boxTop = startY;\n           this.boxEndWidth = startX - endX;\n           this.boxEndHeight = endY - startY;\n           \n           this.toolTipLeft = endX - this.toolTipWidth;\n           this.toolTipTop = endY;\n           \n           if (endX - this.toolTipWidth <= 0) {\n             this.toolTipLeft = this.tooltipMargin;\n           }\n           \n           if (endY + this.toolTipHeight + (this.tooltipMargin * 2) >= windowHeight) {\n             this.toolTipTop = windowHeight - this.toolTipHeight - (this.tooltipMargin * 2);\n           }\n           \n         } else if (endX >= startX && endY <= startY) {\n           \n           this.isDragging = true;\n           \n           this.boxLeft = startX;\n           this.boxTop = endY;\n           this.boxEndWidth = endX - startX;\n           this.boxEndHeight = startY - endY;\n           \n           this.toolTipLeft = endX;\n           this.toolTipTop = endY - this.toolTipHeight;\n           \n           this.borderWidth = endY + \"px \" + (windowWidth - endX) + \"px \" + (windowHeight - startY) + \"px \" + startX + \"px\";\n           \n           if (endX + this.toolTipWidth >= windowWidth) {\n             this.toolTipLeft = windowWidth - this.toolTipWidth - (this.tooltipMargin * 2);\n           }\n           \n           if (endY - this.toolTipHeight <= 0) {\n             this.toolTipTop = this.tooltipMargin;\n           }\n           \n         } else if (endX <= startX && endY <= startY) {\n           \n           this.isDragging = true;\n           \n           this.boxLeft = endX;\n           this.boxTop = endY;\n           this.boxEndWidth = startX - endX;\n           this.boxEndHeight = startY - endY;\n           \n           this.borderWidth = endY + \"px \" + (windowWidth - startX) + \"px \" + (windowHeight - startY) + \"px \" + endX + \"px\";\n           \n           this.toolTipLeft = endX - this.toolTipWidth;\n           this.toolTipTop = endY - this.toolTipHeight;\n           \n           if (endX - this.toolTipWidth <= 0) {\n             this.toolTipLeft = this.tooltipMargin;\n           }\n           \n           if (endY - this.toolTipHeight <= 0) {\n             this.toolTipTop = this.tooltipMargin;\n           }\n           \n         } else {\n           this.isDragging = false;\n         }\n        \n      }\n      \n    },\n\n    mouseDown: function (e) {\n      this.borderWidth = this.windowWidth + \"px \" + this.windowHeight + \"px\"; \n      \n      this.startX = e.clientX;\n      this.startY = e.clientY;\n      \n      this.toolTipWidth = this.tooltip.getBoundingClientRect().width;\n      \n      this.mouseIsDown = true;\n      this.tookScreenShot = false;\n    },\n\n    mouseUp: function () {\n      this.borderWidth = 0;\n      \n      if (this.isDragging) {\n        // Don't take the screenshot unless the mouse moved somehow.\n        this.tookScreenShot = true;\n      }\n      \n      this.isDragging = false;\n      this.mouseIsDown = false;\n      this.takeScreenshot()\n    },\n\n    takeScreenshot: function () {\n    // eslint-disable-next-line no-debugger\n    debugger\n    html2canvas(document.querySelector('.body')).then(canvas => {\n      let croppedCanvas = document.createElement('canvas'),\n          croppedCanvasContext = croppedCanvas.getContext('2d');\n\n      croppedCanvas.width  = this.croppedImageWidth;\n      croppedCanvas.height = this.croppedImageHeight;\n\n      croppedCanvasContext.drawImage(canvas, this.startX, this.startY, this.croppedImageWidth, this.croppedImageHeight, 0, 0, this.croppedImageWidth, this.croppedImageHeight);\n// eslint-disable-next-line no-debugger\ndebugger\n      this.imageUrl = croppedCanvas.toDataURL();\n    });\n  }\n},\n  mounted() {\n    \n    this.crosshairs = document.querySelector(\".crosshairs\");\n    this.overlay = document.querySelector(\".overlay\");\n    this.tooltip = document.querySelector(\".tooltip\");\n    \n    var self = this;\n    \n    this.windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    this.windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    \n    this.toolTipWidth = self.tooltip.getBoundingClientRect().width;\n    \n    // To recalculate the width and height if the screen size changes.\n    window.onresize = function () {\n      self.windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n      self.windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    };\n    \n    this.tooltipMargin = window.getComputedStyle(this.$refs['tooltip']).margin.split(\"px\")[0]\n    \n  },\n}\n\n</script>\n\n<style>\n/* Foundation */\n*,\n*:before,\n*:after {\n    box-sizing: border-box;\n}\n\nhtml, body {\n  padding: 0;\n  margin: 0;\n  height: 100%;\n}\n\n.overlay,\n.crosshairs,\n.tooltip,\n.borderedBox {\n  user-select: none;\n}\n\n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.overlay.highlighting {\n  background: none;\n  border-color: rgba(0, 0, 0, 0.5);\n  border-style: solid;\n}\n\n.crosshairs {\n  height: 100%;\n  position: absolute;\n  width: 100%;\n  z-index: 2147483645;\n}\n\n.crosshairs.hidden {\n  display: none;\n}\n\n\n.crosshairs::before,\n.crosshairs::after {\n  content: \"\";\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  border: none !important;\n  border-image:  !important;\n}\n\n.crosshairs::before {\n  left: -100%;\n  top: -100%;\n  border-right: 1px solid rgba(255, 255, 255, 0.3) !important;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.3) !important;\n}\n\n.crosshairs::after {\n  left: 0px;\n  top: 0px;\n  border-top: 1px solid rgba(255, 255, 255, 0.3) !important;\n  border-left: 1px solid rgba(255, 255, 255, 0.3) !important;\n}\n\n.container {\n  clear: both;\n  overflow: hidden;\n  width: 100%;\n  height: 100%;\n  background-image: url(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/260969/kendrick-lamar.png\");\n  background-repeat: no-repeat;\n  background-size: cover;\n}\n\n.borderedBox {\n  border: 1px solid #fff;\n  position: absolute;\n}\n\n.borderedBox.hidden {\n  display: none;\n}\n\n.tooltip {\n  \n  display: inline-block;\n  position: absolute;\n  \n  background-color: grey;\n  color: #fff;\n  \n  border-radius: 4px;\n  \n  font-size: 12px;\n  font-family: monospace;\n  \n  padding: 6px;\n  margin: 6px;\n  white-space: nowrap;\n}\n\n.tooltip.hidden {\n  display: none;\n}\n\n.Flash {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  \n  top: 0;\n  left: 0;\n  \n  background-color: #fff;\n  z-index: 2147483646;\n  \n  opacity: 1;\n  \n  animation-delay: 0.2s;\n  animation-name: fade-out;\n  animation-duration: 1s;\n  animation-iteration-count: 1;\n  animation-fill-mode: forwards;\n}\n\n.screenshot-enter-active, .screenshot-leave-active {\n  transition: opacity .2s;\n}\n\n.screenshot-enter, .screenshot-leave-to /* .fade-leave-active below version 2.1.8 */ {\n  opacity: 0;\n}\n\n@keyframes fade-out {\n  from {\n    opacity: 1;\n  }\n\n  to {\n    opacity: 0;\n  }\n}\n</style>"]},"metadata":{},"sourceType":"module"}