{"ast":null,"code":"import { normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    id: \"screenshot\",\n    class: \"container\",\n    onMousemove: _cache[0] || (_cache[0] = (...args) => $options.move && $options.move(...args)),\n    onMousedown: _cache[1] || (_cache[1] = (...args) => $options.mouseDown && $options.mouseDown(...args)),\n    onMouseup: _cache[2] || (_cache[2] = (...args) => $options.mouseUp && $options.mouseUp(...args))\n  }, [_createElementVNode(\"div\", {\n    class: _normalizeClass([\"overlay\", {\n      'highlighting': $data.isMouseDown\n    }]),\n    style: _normalizeStyle({\n      borderWidth: _ctx.borderWidth\n    })\n  }, null, 6\n  /* CLASS, STYLE */\n  ), _createElementVNode(\"div\", {\n    class: _normalizeClass([\"crosshairs\", {\n      'hidden': $data.isDraggingMouse\n    }]),\n    style: _normalizeStyle({\n      left: $data.crossHairsLeft + 'px',\n      top: $data.crossHairsTop + 'px'\n    })\n  }, null, 6\n  /* CLASS, STYLE */\n  )], 32\n  /* HYDRATE_EVENTS */\n  );\n}","map":{"version":3,"mappings":";;uBACEA,oBAGI,KAHJ,EAGI;IAHCC,EAAE,EAAC,YAGJ;IAHiBC,KAAK,EAAC,WAGvB;IAHoCC,WAAS,yCAAEC,uCAAF,CAG7C;IAHsDC,WAAS,yCAAED,iDAAF,CAG/D;IAH6EE,SAAO,yCAAEF,6CAAF;EAGpF,CAHJ,GACAG,oBAA2G,KAA3G,EAA2G;IAAtGL,KAAK,mBAAC,SAAD,EAAU;MAAA,gBAA4BM;IAA5B,CAAV,EAAiG;IAA3CC,KAAK;MAAAC,aAAiBC;IAAjB;EAAsC,CAA3G;;EAAA,GACAJ,oBAA0I,KAA1I,EAA0I;IAArIL,KAAK,mBAAC,YAAD,EAAa;MAAA,UAAsBM;IAAtB,CAAb,EAAgI;IAAzEC,KAAK;MAAAG,MAAUJ,uBAAc,IAAxB;MAAwBK,KAAcL,sBAAa;IAAnD;EAAoE,CAA1I;;EAAA,EAFA;;EAAA","names":["_createElementBlock","id","class","onMousemove","$options","onMousedown","onMouseup","_createElementVNode","$data","style","borderWidth","_ctx","left","top"],"sourceRoot":"","sources":["/home/misa/Coding/test-screenshot/test-screenshot/test-screenshot/src/components/screen-shot.vue"],"sourcesContent":["<template>\n  <div id=\"screenshot\" class=\"container\" @mousemove=\"move\" @mousedown=\"mouseDown\" @mouseup=\"mouseUp\">\n  <div class=\"overlay\" :class=\"{ 'highlighting' : isMouseDown }\" :style=\"{ borderWidth: borderWidth }\"></div>\n  <div class=\"crosshairs\" :class=\"{ 'hidden' : isDraggingMouse }\" :style=\"{ left: crossHairsLeft + 'px', top: crossHairsTop + 'px' }\"></div>\n</div>\n</template>\n\n<script>\nimport html2canvas from 'html2canvas'\nexport default {\n  data() { return {\n    crossHairsLeft: 0,\n    crossHairsTop: 0,\n    startX: 0,\n    startY: 0,\n    isMouseDown: false,\n    isDraggingMouse: false\n  }\n  },\n\n  methods: {\n\n    move: function (event) {\n             var startY       = this.startY,\n          startX       = this.startX,\n          endX         = event.clientX,\n          endY         = event.clientY,\n          windowWidth  = window.innerWidth,\n          windowHeight = window.innerHeight\n      this.crossHairsTop = event.clientY;\n      this.crossHairsLeft = event.clientX;\n            if (this.isMouseDown) {\n        if (endX >= startX && endY >= startY) {\n          this.isDragging = true;\n          this.borderWidth = startY + \"px \" + (windowWidth - endX) + \"px \" + (windowHeight - endY) + \"px \" + startX + \"px\";\n        }\n      }\n    },\n\n    mouseDown: function (event) {\n      this.startX = event.clientX;\n      this.startY = event.clientY;\n      this.isMouseDown = true;\n    },\n\n    mouseUp: function () {\n    this.borderWidth = 0; // resetting the overlay\n\n    if (this.isDragging) {\n      // Don't take the screenshot unless the mouse moved somehow.\n      this.tookScreenShot = true;\n    }\n\n    this.isDragging = false;\n    this.mouseIsDown = false;\n\n    this.takeScreenshot();\n\n},\n\n  takeScreenshot: function () {\n    html2canvas(document.querySelector('body')).then(canvas => {\n      let croppedCanvas = document.createElement('canvas'),\n          croppedCanvasContext = croppedCanvas.getContext('2d');\n\n      croppedCanvas.width  = this.croppedImageWidth;\n      croppedCanvas.height = this.croppedImageHeight;\n\n      croppedCanvasContext.drawImage(canvas, this.startX, this.startY, this.croppedImageWidth, this.croppedImageHeight, 0, 0, this.croppedImageWidth, this.croppedImageHeight);\n\n      this.imageUrl = croppedCanvas.toDataURL();\n    });\n  }\n}\n}\n\n</script>\n\n<style>\n\n</style>"]},"metadata":{},"sourceType":"module"}